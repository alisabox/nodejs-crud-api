(()=>{var e={738:(e,n,t)=>{const o=t(147),r=t(17),i=t(37),a=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function s(e){console.log(`[dotenv][DEBUG] ${e}`)}const c={config:function(e){let n=r.resolve(process.cwd(),".env"),t="utf8";const a=Boolean(e&&e.debug),d=Boolean(e&&e.override);var u;e&&(null!=e.path&&(n="~"===(u=e.path)[0]?r.join(i.homedir(),u.slice(1)):u),null!=e.encoding&&(t=e.encoding));try{const e=c.parse(o.readFileSync(n,{encoding:t}));return Object.keys(e).forEach((function(n){Object.prototype.hasOwnProperty.call(process.env,n)?(!0===d&&(process.env[n]=e[n]),a&&s(!0===d?`"${n}" is already defined in \`process.env\` and WAS overwritten`:`"${n}" is already defined in \`process.env\` and was NOT overwritten`)):process.env[n]=e[n]})),{parsed:e}}catch(e){return a&&s(`Failed to load ${n} ${e.message}`),{error:e}}},parse:function(e){const n={};let t,o=e.toString();for(o=o.replace(/\r\n?/gm,"\n");null!=(t=a.exec(o));){const e=t[1];let o=t[2]||"";o=o.trim();const r=o[0];o=o.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===r&&(o=o.replace(/\\n/g,"\n"),o=o.replace(/\\r/g,"\r")),n[e]=o}return n}};e.exports.config=c.config,e.exports.parse=c.parse,e.exports=c},147:e=>{"use strict";e.exports=require("fs")},37:e=>{"use strict";e.exports=require("os")},17:e=>{"use strict";e.exports=require("path")}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={exports:{}};return e[o](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{"use strict";const e=require("http");var n=t.n(e);const o=require("cluster");var r=t.n(o),i=t(738),a=t.n(i);const s=require("crypto");var c=t.n(s);const d=new Uint8Array(256);let u=d.length;function l(){return u>d.length-16&&(c().randomFillSync(d),u=0),d.slice(u,u+=16)}const f=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,v=[];for(let e=0;e<256;++e)v.push((e+256).toString(16).substr(1));const p=function(e,n=0){const t=(v[e[n+0]]+v[e[n+1]]+v[e[n+2]]+v[e[n+3]]+"-"+v[e[n+4]]+v[e[n+5]]+"-"+v[e[n+6]]+v[e[n+7]]+"-"+v[e[n+8]]+v[e[n+9]]+"-"+v[e[n+10]]+v[e[n+11]]+v[e[n+12]]+v[e[n+13]]+v[e[n+14]]+v[e[n+15]]).toLowerCase();if(!function(e){return"string"==typeof e&&f.test(e)}(t))throw TypeError("Stringified UUID is invalid");return t},y=function(e,n,t){const o=(e=e||{}).random||(e.rng||l)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,n){t=t||0;for(let e=0;e<16;++e)n[t+e]=o[e];return n}return p(o)};var h=function(e,n,t,o){return new(t||(t=Promise))((function(r,i){function a(e){try{c(o.next(e))}catch(e){i(e)}}function s(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,s)}c((o=o.apply(e,n||[])).next())}))};const g=e=>!!e.match("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");let w=[];const m=e=>h(void 0,void 0,void 0,(function*(){return w.find((n=>n.id===e))})),x=e=>h(void 0,void 0,void 0,(function*(){return JSON.stringify(yield m(e))}));const b=(e,n,t)=>{return o=void 0,r=void 0,a=function*(){if(t&&g(t)){const e=yield(e=>h(void 0,void 0,void 0,(function*(){return!!(yield m(e))&&(w=w.filter((n=>n.id!==e)),!0)})))(t);e?(n.writeHead(204,{"Content-type":"application/json"}),n.end()):(n.writeHead(404,{"Content-type":"text/html"}),n.end("User Not Found"))}else n.writeHead(400,{"Content-type":"text/html"}),n.end("Invalid UserId")},new((i=void 0)||(i=Promise))((function(e,n){function t(e){try{c(a.next(e))}catch(e){n(e)}}function s(e){try{c(a.throw(e))}catch(e){n(e)}}function c(n){var o;n.done?e(n.value):(o=n.value,o instanceof i?o:new i((function(e){e(o)}))).then(t,s)}c((a=a.apply(o,r||[])).next())}));var o,r,i,a};const S=(e,n)=>{return t=void 0,o=void 0,i=function*(){n?g(n)?(yield m(n))?(e.writeHead(200,{"Content-type":"application/json"}),e.end(yield x(n))):(e.writeHead(404,{"Content-type":"text/html"}),e.end("User Not Found")):(e.writeHead(400,{"Content-type":"text/html"}),e.end("Invalid UserId")):(e.writeHead(200,{"Content-type":"application/json"}),e.end(JSON.stringify(w)))},new((r=void 0)||(r=Promise))((function(e,n){function a(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(n){var t;n.done?e(n.value):(t=n.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}c((i=i.apply(t,o||[])).next())}));var t,o,r,i};var C=function(e,n,t,o){return new(t||(t=Promise))((function(r,i){function a(e){try{c(o.next(e))}catch(e){i(e)}}function s(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,s)}c((o=o.apply(e,n||[])).next())}))};var O=function(e,n,t,o){return new(t||(t=Promise))((function(r,i){function a(e){try{c(o.next(e))}catch(e){i(e)}}function s(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,s)}c((o=o.apply(e,n||[])).next())}))};const H=(e,n,t)=>O(void 0,void 0,void 0,(function*(){if(t&&g(t)){let o="";e.on("data",(e=>O(void 0,void 0,void 0,(function*(){if(o+=e.toString(),yield m(t)){const e=yield((e,n)=>h(void 0,void 0,void 0,(function*(){const t=yield JSON.parse(e);if(yield((e,n)=>h(void 0,void 0,void 0,(function*(){return(yield m(n))&&e.username&&e.age&&e.hobbies})))(t,n)){const e={id:n,username:t.username,age:t.age,hobbies:t.hobbies};return w=[...w.filter((e=>e.id!==n)),e],!0}return!1})))(o,t);e?(n.writeHead(200,{"Content-type":"application/json"}),n.end(yield x(t))):(n.writeHead(400,{"Content-type":"text/html"}),n.end("Invalid Data Format"))}else n.writeHead(404,{"Content-type":"text/html"}),n.end("User Not Found")}))))}else n.writeHead(400,{"Content-type":"text/html"}),n.end("Invalid UserId")})),$=require("process");a().config();const F=process.env.PORT,P=n().createServer(((e,n)=>{return t=void 0,o=void 0,i=function*(){var t,o;const r="/api/users",i=null===(t=e.url)||void 0===t?void 0:t.replace(r,"").substring(1);try{if(e.url===r||(null===(o=e.url)||void 0===o?void 0:o.startsWith(r))&&i)switch(e.method){case"GET":yield S(n,i);break;case"POST":yield((e,n)=>C(void 0,void 0,void 0,(function*(){let t="";e.on("data",(e=>C(void 0,void 0,void 0,(function*(){t+=e.toString();const o=yield(e=>h(void 0,void 0,void 0,(function*(){const n=yield JSON.parse(e);if(n.username&&n.age&&n.hobbies){const e={id:y(),username:n.username,age:n.age,hobbies:n.hobbies};return w.push(e),e}})))(t);o?(n.writeHead(201,{"Content-type":"application/json"}),n.end(JSON.stringify(o))):(n.writeHead(400,{"Content-type":"text/html"}),n.end("Invalid Data Format"))}))))})))(e,n);break;case"PUT":yield H(e,n,i);break;case"DELETE":yield b(0,n,i);break;default:yield S(n)}else n.writeHead(404,{"Content-type":"application/json"}),n.end(JSON.stringify({message:"Route Not Found"}))}catch(e){n.writeHead(500,{"Content-type":"application/json"}),n.end(JSON.stringify({message:"Internal Server Error"}))}},new((r=void 0)||(r=Promise))((function(e,n){function a(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(n){var t;n.done?e(n.value):(t=n.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}c((i=i.apply(t,o||[])).next())}));var t,o,r,i}));if("multi"===$.env.npm_config_mode){const e=t(37).cpus().length;if(r().isPrimary){console.log(`Master ${process.pid} is running`);for(let n=0;n<e;n++)r().fork();r().on("exit",((e,n,t)=>{console.log(`worker ${e.process.pid} died`)}))}else P.listen(F,(()=>{console.log(`Worker ${process.pid} started`)}))}else P.listen(F,(()=>console.log(`Server started at http://localhost:${F}`)))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,