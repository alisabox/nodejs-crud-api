(()=>{var n={738:(n,e,t)=>{const o=t(147),i=t(17),r=t(37),a=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function c(n){console.log(`[dotenv][DEBUG] ${n}`)}const s={config:function(n){let e=i.resolve(process.cwd(),".env"),t="utf8";const a=Boolean(n&&n.debug),d=Boolean(n&&n.override);var u;n&&(null!=n.path&&(e="~"===(u=n.path)[0]?i.join(r.homedir(),u.slice(1)):u),null!=n.encoding&&(t=n.encoding));try{const n=s.parse(o.readFileSync(e,{encoding:t}));return Object.keys(n).forEach((function(e){Object.prototype.hasOwnProperty.call(process.env,e)?(!0===d&&(process.env[e]=n[e]),a&&c(!0===d?`"${e}" is already defined in \`process.env\` and WAS overwritten`:`"${e}" is already defined in \`process.env\` and was NOT overwritten`)):process.env[e]=n[e]})),{parsed:n}}catch(n){return a&&c(`Failed to load ${e} ${n.message}`),{error:n}}},parse:function(n){const e={};let t,o=n.toString();for(o=o.replace(/\r\n?/gm,"\n");null!=(t=a.exec(o));){const n=t[1];let o=t[2]||"";o=o.trim();const i=o[0];o=o.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===i&&(o=o.replace(/\\n/g,"\n"),o=o.replace(/\\r/g,"\r")),e[n]=o}return e}};n.exports.config=s.config,n.exports.parse=s.parse,n.exports=s},147:n=>{"use strict";n.exports=require("fs")},37:n=>{"use strict";n.exports=require("os")},17:n=>{"use strict";n.exports=require("path")}},e={};function t(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={exports:{}};return n[o](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{"use strict";const n=require("http");var e=t.n(n),o=t(738),i=t.n(o);const r=require("crypto");var a=t.n(r);const c=new Uint8Array(256);let s=c.length;function d(){return s>c.length-16&&(a().randomFillSync(c),s=0),c.slice(s,s+=16)}const u=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,l=[];for(let n=0;n<256;++n)l.push((n+256).toString(16).substr(1));const f=function(n,e=0){const t=(l[n[e+0]]+l[n[e+1]]+l[n[e+2]]+l[n[e+3]]+"-"+l[n[e+4]]+l[n[e+5]]+"-"+l[n[e+6]]+l[n[e+7]]+"-"+l[n[e+8]]+l[n[e+9]]+"-"+l[n[e+10]]+l[n[e+11]]+l[n[e+12]]+l[n[e+13]]+l[n[e+14]]+l[n[e+15]]).toLowerCase();if(!function(n){return"string"==typeof n&&u.test(n)}(t))throw TypeError("Stringified UUID is invalid");return t},p=function(n,e,t){const o=(n=n||{}).random||(n.rng||d)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){t=t||0;for(let n=0;n<16;++n)e[t+n]=o[n];return e}return f(o)};var v=function(n,e,t,o){return new(t||(t=Promise))((function(i,r){function a(n){try{s(o.next(n))}catch(n){r(n)}}function c(n){try{s(o.throw(n))}catch(n){r(n)}}function s(n){var e;n.done?i(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(a,c)}s((o=o.apply(n,e||[])).next())}))};const y=n=>!!n.match("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");let h=[];const w=n=>v(void 0,void 0,void 0,(function*(){return h.find((e=>e.id===n))})),g=n=>v(void 0,void 0,void 0,(function*(){return JSON.stringify(yield w(n))}));const m=(n,e,t)=>{return o=void 0,i=void 0,a=function*(){if(t&&y(t)){const n=yield(n=>v(void 0,void 0,void 0,(function*(){return!!(yield w(n))&&(h=h.filter((e=>e.id!==n)),!0)})))(t);n?(e.writeHead(204,{"Content-type":"application/json"}),e.end()):(e.writeHead(404,{"Content-type":"application/json"}),e.end("User Not Found"))}else e.writeHead(400,{"Content-type":"application/json"}),e.end("Invalid UserId")},new((r=void 0)||(r=Promise))((function(n,e){function t(n){try{s(a.next(n))}catch(n){e(n)}}function c(n){try{s(a.throw(n))}catch(n){e(n)}}function s(e){var o;e.done?n(e.value):(o=e.value,o instanceof r?o:new r((function(n){n(o)}))).then(t,c)}s((a=a.apply(o,i||[])).next())}));var o,i,r,a};const b=(n,e)=>{return t=void 0,o=void 0,r=function*(){e?y(e)?(yield w(e))?(n.writeHead(200,{"Content-type":"application/json"}),n.end(yield g(e))):(n.writeHead(404,{"Content-type":"application/json"}),n.end("User Not Found")):(n.writeHead(400,{"Content-type":"application/json"}),n.end("Invalid UserId")):(n.writeHead(200,{"Content-type":"application/json"}),n.end(JSON.stringify(h)))},new((i=void 0)||(i=Promise))((function(n,e){function a(n){try{s(r.next(n))}catch(n){e(n)}}function c(n){try{s(r.throw(n))}catch(n){e(n)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(n){n(t)}))).then(a,c)}s((r=r.apply(t,o||[])).next())}));var t,o,i,r};var x=function(n,e,t,o){return new(t||(t=Promise))((function(i,r){function a(n){try{s(o.next(n))}catch(n){r(n)}}function c(n){try{s(o.throw(n))}catch(n){r(n)}}function s(n){var e;n.done?i(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(a,c)}s((o=o.apply(n,e||[])).next())}))};var j=function(n,e,t,o){return new(t||(t=Promise))((function(i,r){function a(n){try{s(o.next(n))}catch(n){r(n)}}function c(n){try{s(o.throw(n))}catch(n){r(n)}}function s(n){var e;n.done?i(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(a,c)}s((o=o.apply(n,e||[])).next())}))};const S=(n,e,t)=>j(void 0,void 0,void 0,(function*(){if(t&&y(t)){let o="";n.on("data",(n=>j(void 0,void 0,void 0,(function*(){if(o+=n.toString(),yield w(t)){const n=yield((n,e)=>v(void 0,void 0,void 0,(function*(){const t=yield JSON.parse(n);if(yield((n,e)=>v(void 0,void 0,void 0,(function*(){return(yield w(e))&&n.username&&n.age&&n.hobbies})))(t,e)){const n={id:e,username:t.username,age:t.age,hobbies:t.hobbies};return h=[...h.filter((n=>n.id!==e)),n],!0}return!1})))(o,t);n?(e.writeHead(200,{"Content-type":"application/json"}),e.end(yield g(t))):(e.writeHead(400,{"Content-type":"application/json"}),e.end("Invalid Data Format"))}else e.writeHead(404,{"Content-type":"application/json"}),e.end("User Not Found")}))))}else e.writeHead(400,{"Content-type":"application/json"}),e.end("Invalid UserId")}));i().config();const C=process.env.PORT;e().createServer(((n,e)=>{return t=void 0,o=void 0,r=function*(){var t,o;const i="/api/users",r=null===(t=n.url)||void 0===t?void 0:t.replace(i,"").substring(1);try{if(null===(o=n.url)||void 0===o?void 0:o.startsWith(i))switch(n.method){case"GET":yield b(e,r);break;case"POST":yield((n,e)=>x(void 0,void 0,void 0,(function*(){let t="";n.on("data",(n=>x(void 0,void 0,void 0,(function*(){t+=n.toString();const o=yield(n=>v(void 0,void 0,void 0,(function*(){const e=yield JSON.parse(n);if(e.username&&e.age&&e.hobbies){const n={id:p(),username:e.username,age:e.age,hobbies:e.hobbies};return h.push(n),n}})))(t);o?(e.writeHead(201,{"Content-type":"application/json"}),e.end(JSON.stringify(o))):(e.writeHead(400,{"Content-type":"application/json"}),e.end("Invalid Data Format"))}))))})))(n,e);break;case"PUT":yield S(n,e,r);break;case"DELETE":yield m(0,e,r);break;default:yield b(e)}else e.writeHead(404,{"Content-type":"application/json"}),e.end(JSON.stringify({message:"Route Not Found"}))}catch(n){e.writeHead(500,{"Content-type":"application/json"}),e.end(JSON.stringify({message:"Internal Server Error"}))}},new((i=void 0)||(i=Promise))((function(n,e){function a(n){try{s(r.next(n))}catch(n){e(n)}}function c(n){try{s(r.throw(n))}catch(n){e(n)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(n){n(t)}))).then(a,c)}s((r=r.apply(t,o||[])).next())}));var t,o,i,r})).listen(C,(()=>console.log(`Server started at http://localhost:${C}`)))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,